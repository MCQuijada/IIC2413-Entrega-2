RELACIONES Y CARDINALIDAD --------------------------------------------------------------------------------------------------------

(N, 1) Direcciones - Clientes: Un cliente puede tener varias direcciones, una direccion solo puede ser de un solo cliente
(N, 1) Direcciones - Comunas: Una comuna puede tener varias direcciones dentro, pero una direccion solo esta en un unica comuna

(N, N) Plato - Restaurantes: Un plato puede servirse en mas de un restaurante, pero un restaurante puede servir varios platos
(N, N) Plato - Ingredientes: Un plato puede tener mas de un ingrediente, un ingrediente puede tener mas de un plato

(N, N) Pedidos - Platos: Un pedido puede contener varios platos, un plato puede pertenecer a mas de un pedido
(N, 1) Pedidos - Despachadores: Un despachador puede hacer varios pedidos, pero un pedido solo lo hace un solo despachador
(N, 1) Pedidos - Delivery: Un delivery puede hacer varios pedidos, pero un pedido lo hace un unico delivery
(N, 1) Pedidos - Clientes: Un cliente puede hacer varios pedidos, pero un pedido lo hace un solo cliente
(N, 1) Pedidos - Sucursales: Una sucursal puede recibir varios pedidos y pedido esta hecho por una sola sucursal

(1, 1) Suscripciones - Clientes: Un cliente tiene una unica suscripcion, una suscripcion alberga un cliente a la vez
(N, 1) Suscripciones - Delivery: Una suscripcion la hace un solo delivery, pero un delivery puede hacer varias suscripciones

(1, 1) Calificacion - Pedido: Una calificacion es de un solo pedido, y un pedido puede tener una sola calificacion

(N, 1) Sucursales - Restaurantes: Un restaurante puede tener varias sucursales, pero una sucursal pertenece a un solo restoran
(N, N) Sucursales - Comunas: Una sucursal puede hacer envios a varias comunas y una comuna puede tener varias sucursales

ORDEN DE AGREGACION Y MODIFICACIONES CON PYTHON Y POSTGRES -----------------------------------------------------------------------

A. Crear todas las tablas de datos con los datos respectivos
SQL_1_clientes = '''
    CREATE TABLE IF NOT EXISTS clientes(
        id SERIAL PRIMARY KEY,
        nombre VARCHAR(30) NOT NULL,
        email VARCHAR(45) NOT NULL UNIQUE,
        clave VARCHAR(100) NOT NULL,
        fono VARCHAR(12) NOT NULL
    );
'''
SQL_2_comunas = '''
    CREATE TABLE IF NOT EXISTS comunas(
        id INT PRIMARY KEY,
        nombre VARCHAR(30),
        provincia VARCHAR(30),
        region VARCHAR(50)
    );
'''

SQL_3_direcciones = '''
    CREATE TABLE IF NOT EXISTS direcciones(
        id SERIAL PRIMARY KEY,
        direccion TEXT NOT NULL UNIQUE,
        cut_comuna INT,
        FOREIGN KEY (cut_comuna) REFERENCES comunas(id)
    );
'''

SQL_3_5_direccion_cleinte = '''
    CREATE TABLE IF NOT EXISTS direcciones_clientes(
    id_direccion INT,
    id_cliente INT,
    PRIMARY KEY(id_direccion, id_cliente),
    FOREIGN KEY (id_direccion) REFERENCES direcciones(id),
    FOREIGN KEY (id_cliente) REFERENCES clientes(id)
    )
'''

SQL_4_restaurantes = '''
    CREATE TABLE IF NOT EXISTS restaurantes(
        id SERIAL PRIMARY KEY,
        nombre VARCHAR(30) NOT NULL UNIQUE,
        vigencia BOOLEAN NOT NULL,
        estilo VARCHAR(30) NOT NULL,
        repartoming INT
    );
'''

SQL_5_platos = '''
    CREATE TABLE IF NOT EXISTS platos(
        id SERIAL PRIMARY KEY,
        nombre VARCHAR(40) NOT NULL UNIQUE,
        descripcion TEXT,
        estilo VARCHAR(30) NOT NULL,
        restriccion VARCHAR(30),
        ingredientes TEXT
        );
'''


SQL_6_platos_restaurantes = '''
    CREATE TABLE IF NOT EXISTS platos_restaurantes(
        id INT PRIMARY KEY,
        id_plato INT,
        id_restaurante INT,
        disponibilidad BOOLEAN NOT NULL,
        porciones INT DEFAULT 1 CHECK (porciones >= 1),
        precio INT NOT NULL,
        tiempo_prep INT DEFAULT 5 CHECK (tiempo_prep >= 1 AND tiempo_prep <= 60),
        FOREIGN KEY (id_plato) REFERENCES platos(id),
        FOREIGN KEY (id_restaurante) REFERENCES restaurantes(id)
    );
'''

SQL_7_sucursales = '''
    CREATE TABLE IF NOT EXISTS sucursales(
            id Serial UNIQUE,
            id_restaurante INT,
            sucursal VARCHAR(30) NOT NULL,
            direccion TEXT NOT NULL,
            fono VARCHAR(12) NOT NULL,
            id_comuna INT,
            FOREIGN KEY (id_restaurante) REFERENCES restaurantes(id),
            FOREIGN KEY (id_comuna) REFERENCES comunas(id),
            PRIMARY KEY(direccion, id_restaurante)
    );
'''

SQL_8_deliverys = '''
    CREATE TABLE IF NOT EXISTS deliverys(
        id SERIAL PRIMARY KEY,
        nombre VARCHAR(30) NOT NULL UNIQUE,
        vigencia BOOLEAN NOT NULL,
        fono VARCHAR(12) NOT NULL UNIQUE,
        tiempo_despacho INT NOT NULL,
        precio_unitario INT,
        precio_mensual INT CHECK (precio_mensual <= 4*precio_unitario),
        precio_anual INT CHECK (precio_mensual <= 12*precio_mensual)
    );
'''

SQL_9_suscripciones = '''
    CREATE TABLE IF NOT EXISTS suscripciones(
        id SERIAL,
        id_cliente INT,
        id_delivery INT,
        ultimo_pago INT,
        estado VARCHAR(30),
        fecha DATE,
        ciclo VARCHAR(30),
        PRIMARY KEY (id_cliente, id_delivery),
        FOREIGN KEY (id_cliente) REFERENCES clientes(id),
        FOREIGN KEY (id_delivery) REFERENCES deliverys(id)
    );
'''

SQL_10_despachadores = '''
    CREATE TABLE IF NOT EXISTS despachadores(
        id SERIAL PRIMARY KEY,
        nombre VARCHAR(30) NOT NULL,
        fono VARCHAR(12) NOT NULL UNIQUE
    );
'''

SQL_11_pedidos = '''
    CREATE TABLE IF NOT EXISTS pedidos(
        id INT PRIMARY KEY,
        id_cliente INT,
        id_delivery INT,
        id_despachador INT,
        fecha DATE NOT NULL,
        hora TIME,
        estado VARCHAR(30),
        FOREIGN KEY (id_cliente) REFERENCES clientes(id),
        FOREIGN KEY (id_delivery) REFERENCES deliverys(id),
        FOREIGN KEY (id_despachador) REFERENCES despachadores(id)
    );
'''

SQL_12_calificaciones = '''
    CREATE TABLE IF NOT EXISTS calificaciones(
        id_pedido INT PRIMARY KEY,
        cal_cliente INT CHECK (cal_cliente >= 1 AND cal_cliente <= 5),
        cal_despachador INT CHECK (cal_despachador >= 1 AND cal_despachador <= 5),
        FOREIGN KEY (id_pedido) REFERENCES pedidos(id)
    );
'''

SQL_13_pedidos_platos = '''
    CREATE TABLE  IF NOT EXISTS pedidos_platos(
        id_pedido INT,
        id_plato INT,
        id_sucursal INT,
        FOREIGN KEY (id_pedido) REFERENCES pedidos(id),
        FOREIGN KEY (id_plato) REFERENCES platos_restaurantes(id),
        PRIMARY KEY (id_pedido, id_plato)
    );
'''

B. Agregar los datos de los archivos mediante la carga de datos
    1. clientes.csv
        - Agregar un ID a todos los clientes. Cada cliente tiene un email unico.
        - Separar y crear una tabla direcciones, porque cada cliente puede tener 1 o mas direcciones y cada direccion puede tener 1 o mas clientes, con el cut comuna.
        - Separar y crear una tabla direccciones-clientes con id_direccion y el id del cliente asociado.
        - En la tabla clientes quitar todos los elementos repetidos
        - TABLA DIRECCIONES:
            - En la tabla direcciones asignar un id a cada direccion particular
            - Poner el cut de la comuna como una llave foranea
        - TABLA DIRECION CLIENTE
            - Poner el id del cliente como una llave foranea
            - Poner el id de la direccion como llave primaria
    2. comuna.csv
        - Asignar el cut de la comuna como llave primaria
    3. platos.csv
        - Asignar el id del plato como la llave primaria
        - Los ingredeintes de se dejará como un texto. Ya que muchos platos tienen ingredientes unicos, por lo que separarlo haria que se creen muchas consultas adicionales.
        - Para los platos repetidos se dejaran igual, siendo el unico valor unico el id. Esto ya que los platos repetidos pueden ser por ocaciones especiales de descuento o otros. Tambien si un usuario compro en el pasado y se actualiza el plato, el valor del gasto que el cliente hizo tambien se actualizará.
        - TABLA PLATO-RESTAURANTES:
            - Guardar la tabla de plato restaurantes con el nombre del id del restaurante y el id del plato 
            - Agregar la disponibilidad, porciones, precio y tiempo. Ya que son variables que dependen del restaurante
    4. cdeldes.csv
        - Separar lo que es delivery, asignar un id_delivery y toda la info relacionada
        - Separa lo que es despachador, asignar un id_despachador y toda la info relacionada

    5. restaurantes.csv
        - Separar las direcciones del resto de elementos y crear una tabla sucursales
        - TABLA SUCURSALES:
            - asignar un id_sucursal a cada sucursal
            - colocar el id_del restaurante del cual se saco la sucursal como foreign key
            - Poner el nombre de la sucursal, direccion, fono
            - Asociar el nombre de la comuna son su cut, y poner el cut de la comuna como foreign key a la tabla de Comunas
        - Colocar el resto de variables del restoran
        - TABLA PLATO-RESTAURANTES:
            - Volver a la tabla de plato restoranes y cambiar el nombre del restoran por el id del restoran y ponerlo en la bdd
    6. pedidos.csv
        - Asignar el id_pedido como la llave primaria
        - Relacionar el correo del cliente con su id de la tabla de clientes y ponerlo en la tabla pedidos como llave foranea
        - Relacionar el nombre del delivery con su id de la tabla de delivery y ponerlo en la tabla de pedidos como llave foranea
        - Relacionar el nombre del despachador con su id de la tabla de despachadores y ponerlo en la tabla de pedidos como llave foranea
        - Relacionar el nombre de la sucursal con el id de la sucursal
        - Agregar los platos a la tabla de relacion pedidos - platos con el id del cliente y el id de los platos
        - Colocar el resto de la info
    7. suscripciones.csv
        - asignar un id_suscripcion a cada linea
        - asociar el email del cliente a su id_cliente y guardarlo
        - asociar el nombre del delivery a su id_delivery y guardarlo
        - agregar el resto de elementos
    8. calificacion.csv
        - Agregar un id_calificacion a cada linea
        - Asignar el id_pedido como foreign key
        - Colocar el resto de variables



Dependencias funcionales:



Platos -> Cada id es unico. Aun que hay repetidos como es el caso de id 6 y 7, ambos son referenciados en los pedidos
mas de dos veces, por lo que los dejaremos como si cada id fuera unico (pero solo el id)

Comunas -> Leer con mac_roman

No tienen comuna en la tabla comunas
Malas
['Chick-Fil-A', 'TRUE', 'fancy', '6000', 'Estado', 'Calle Estado 456, Santiago Centro', '562765432109', ' Santiago Centro']
['Donald Mc', 'FALSE', 'fast food', '3000', 'Estado', 'Calle Estado 789, Santiago Centro', '56876543219', ' Santiago Centro']
['Nolita', 'TRUE', 'fancy', '11000', 'Estado', 'Calle Estado 456, Santiago Centro', '56432109875', ' Santiago Centro']
['Outback Steak', 'FALSE', 'fast food', '19000', 'Maintención', 'Calle Maintención 123, Maintencillo', '56109876541', ' Maintencillo']
['Gilded Truffle', 'TRUE', 'internacional', '19000', 'Estado', 'Calle Estado 789, Santiago Centro', '56765432107', ' Santiago Centro']
['FCK', 'FALSE', 'fast food', '9000', 'Estado', 'Calle Estado 789, Santiago Centro', '56765432105', ' Santiago Centro']
['FCK', 'FALSE', 'fast food', '9000', 'Maintención', 'Calle Maintención 456, Maintencillo', '56432109872', ' Maintencillo']
['FCK', 'FALSE', 'fast food', '9000', 'Estado', 'Calle Estado 123, Santiago Centro', '56109876538', ' Santiago Centro']
['Central Perk', 'FALSE', 'caf√©', '18000', 'Estado', 'Calle Estado 789, Santiago Centro', '562210987649', ' Santiago Centro']
['Krusty Krab', 'TRUE', 'fancy', '3000', 'Maintención', 'Calle Maintención 456, Maintencillo', '562987654315', ' Maintencillo']
['Krusty Krab', 'TRUE', 'fancy', '3000', 'Estado', 'Calle Estado 123, Santiago Centro', '562543210981', ' Santiago Centro']
['Chum Bucket', 'FALSE', 'fast food', '11000', 'Estado', 'Calle Estado 123, Santiago Centro', '562543210979', ' Santiago Centro']
['Chum Bucket', 'FALSE', 'fast food', '11000', 'Maintención', 'Calle Maintención 789, Maintencillo', '562210987646', ' Maintencillo']
['Doble Queso', 'TRUE', 'fast food', '3000', 'Estado', 'Calle Estado 456, Santiago Centro', '562987654312', ' Santiago Centro']
['Pollos Hermanos', 'FALSE', 'internacional', '7000', 'Estado', 'Calle Estado 456, Santiago Centro', '562987654310', ' Santiago Centro']
['Casiss', 'FALSE', 'caf√©', '10000', 'Maintención', 'Calle Maintención 123, Maintencillo', '562543210976', ' Maintencillo']
['Casiss', 'FALSE', 'caf√©', '10000', 'Estado', 'Calle Estado 789, Santiago Centro', '562210987643', ' Santiago Centro']
['Korf', 'FALSE', 'fast food', '16000', 'Estado', 'Calle Estado 789, Santiago Centro', '562210987641', ' Santiago Centro']
['Korf', 'FALSE', 'fast food', '16000', 'Maintención', 'Calle Maintención 456, Maintencillo', '562987654307', ' Maintencillo']
['Korf', 'FALSE', 'fast food', '16000', 'Estado', 'Calle Estado 123, Santiago Centro', '562543210973', ' Santiago Centro']
['Papa Juan', 'FALSE', 'fast food', '15000', 'Estado', 'Calle Estado 123, Santiago Centro', '562543210971', ' Santiago Centro']
['Papa Juan', 'FALSE', 'fast food', '15000', 'Maintención', 'Calle Maintención 789, Maintencillo', '562210987638', ' Maintencillo']
['Papa Juan', 'FALSE', 'fast food', '15000', 'Estado', 'Calle Estado 456, Santiago Centro', '562987654304', ' Santiago Centro']
['Pequeño Cesar', 'FALSE', 'fast food', '8000', 'Estado', 'Calle Estado 456, Santiago Centro', '562987654302', ' Santiago Centro']
['Metro Sandwich', 'FALSE', 'fast food', '2000', 'Maintención', 'Calle Maintención 123, Maintencillo', '562543210968', ' Maintencillo']
['Metro Sandwich', 'FALSE', 'fast food', '2000', 'Estado', 'Calle Estado 789, Santiago Centro', '562210987635', ' Santiago Centro']
['Carlos Sr', 'FALSE', 'fast food', '7000', 'Estado', 'Calle Estado 456, Santiago Centro', '56471396258', ' Santiago Centro']
['Just Pizza', 'TRUE', 'fast food', '8000', 'Maintención', 'Calle Maintención 123, Maintencillo', '56693258147', ' Maintencillo']
['Just Pizza', 'TRUE', 'fast food', '8000', 'Estado', 'Calle Estado 789, Santiago Centro', '56825369147', ' Santiago Centro']