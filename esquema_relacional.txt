RELACIONES Y CARDINALIDAD --------------------------------------------------------------------------------------------------------

(N, 1) Direcciones - Clientes: Un cliente puede tener varias direcciones, una direccion solo puede ser de un solo cliente
(N, 1) Direcciones - Comunas: Una comuna puede tener varias direcciones dentro, pero una direccion solo esta en un unica comuna

(N, N) Plato - Restaurantes: Un plato puede servirse en mas de un restaurante, pero un restaurante puede servir varios platos
(N, N) Plato - Ingredientes: Un plato puede tener mas de un ingrediente, un ingrediente puede tener mas de un plato

(N, N) Pedidos - Platos: Un pedido puede contener varios platos, un plato puede pertenecer a mas de un pedido
(N, 1) Pedidos - Despachadores: Un despachador puede hacer varios pedidos, pero un pedido solo lo hace un solo despachador
(N, 1) Pedidos - Delivery: Un delivery puede hacer varios pedidos, pero un pedido lo hace un unico delivery
(N, 1) Pedidos - Clientes: Un cliente puede hacer varios pedidos, pero un pedido lo hace un solo cliente
(N, 1) Pedidos - Sucursales: Una sucursal puede recibir varios pedidos y pedido esta hecho por una sola sucursal

(1, 1) Suscripciones - Clientes: Un cliente tiene una unica suscripcion, una suscripcion alberga un cliente a la vez
(N, 1) Suscripciones - Delivery: Una suscripcion la hace un solo delivery, pero un delivery puede hacer varias suscripciones

(1, 1) Calificacion - Pedido: Una calificacion es de un solo pedido, y un pedido puede tener una sola calificacion

(N, 1) Sucursales - Restaurantes: Un restaurante puede tener varias sucursales, pero una sucursal pertenece a un solo restoran
(N, N) Sucursales - Comunas: Una sucursal puede hacer envios a varias comunas y una comuna puede tener varias sucursales

ORDEN DE AGREGACION Y MODIFICACIONES CON PYTHON Y POSTGRES -----------------------------------------------------------------------

A. Crear todas las tablas de datos con los datos respectivos
    1. Clientes:

    CREATE TABLE clientes(
        id INT PRIMARY KEY,
        nombre VARCHAR(30) NOT NULL,
        email VARCHAR(30) NOT NULL UNIQUE,
        clave VARCHAR(100) NOT NULL,
        fono VARCHAR(12) NOT NULL
    );

    2. Direcciones

    CREATE TABLE direcciones(
        id INT PRIMARY KEY,
        id_cliente INT FOREIGN KEY,
        direccion VARCHAR(30) NOT NULL,
        cut_comuna INT FOREIGN KEY
    );

    3. Platos

    CREATE TABLE platos(
        id INT PRIMARY KEY,
        nombre VARCHAR(30) NOT NULL,
        descripcion TEXT,
        disponibilidad BOOLEAN NOT NULL,
        estilo VARCHAR(30) NOT NULL,
        restriccion INT,
        porciones INT DEFAULT 1 CHECK (id >= 1),
        precio INT NOT NULL,
        tiempo_prep INT DEFAULT 5 CHECK (tiempo_prep >= 1 AND tiempo_prep <= 60),
    );

    4. Comunas

    CREATE TABLE comunas(
        id INT PRIMARY KEY,
        nombre VARCHAR(30),
        provincia VARCHAR(30),
        region VARCHAR(30)
    )

    5. Pedidos

    CREATE TABLE pedidos(
        id INT PRIMARY KEY,
        id_cliente INT FOREIGN KEY,
        id_sucursal INT FOREIGN KEY,
        id_delivery INT FOREIGN KEY,
        id_despachador INT FOREIGN KEY,
        fecha DATE NOT NULL,
        hora TIME TMZ,
        estado VARCHAR(30)
    );

    6. Suscripciones

    CREATE TABLE suscripciones(
        id INT PRIMARY KEY,
        id_cliente INT FOREIGN KEY,
        id_delivery INT FOREIGN KEY,
        ultimo_pago: INT,
        estado: VARCHAR(30),
        fecha: DATE,
        ciclo: VARCHAR(30)
    );

    7. Calificaciones

    CREATE TABLE calificaciones(
        id INT PRIMARY KEY,
        id_pedido INT FOREIGN KEY
        cal_cliente INT CHECK (cal_cliente >= 1 AND cal_cliente <= 5),
        cal_despachador INT CHECK (cal_despachador >= 1 AND cal_despachador <= 5)
    );

    8. Deliverys

    CREATE TABLE deliverys(
        id INT PRIMARY KEY,
        nombre VARCHAR(30) NOT NULL,
        vigencia BOOLEAN NOT NULL,
        fono VARCHAR(12) NOT NULL UNIQUE,
        tiempo_despacho INT NOT NULL,
        precio_unitario INT,
        precio_mensual INT CHECK (precio_mensual <= 4*precio_unitario),
        precio_anual INT CHECK (precio_mensual <= 12*precio_mensual)
    );

    9. Restaurantes

    CREATE TABLE restaurantes(
        id INT PRIMARY KEY,
        nombre VARCHAR(30) NOT NULL UNIQUE
        vigencia BOOLEAN NOT NULL
        estilo VARCHAR(30) NOT NULL
        repartoming INT
    )

    10. Sucursales

    CREATE TABLE sucursales(
        id INT PRIMARY KEY,
        id_restaurante INT FOREIGN KEY,
        sucursal VARCHAR(30) NOT NULL,
        direccion VARCHAR(30) NOT NULL,
        fonos VARCHAR(12) NOT NULL
    );

    11. Despachadores

    CREATE TABLE despachadores(
        id INT PRIMARY KEY,
        nombre VARCHAR(30) NOT NULL,
        fono VARCHAR(12) NOT NULL
    );

    12. Platos-Restaurantes

    CREATE TABLE platos_restaurantes(
        id_plato FOREIGN KEY,
        id_restaurante FOREIGN KEY
    )

    13. Ingredientes

    CREATE TABLE ingredientes(
        id_ingrediente INT PRIMARY KEY,
        ingrediente VARCHAR(30) NOT NULL
    )

    14. Platos-Ingredientes

    CREATE TABLE platos_ingredientes(
        id_plato FOREIGN KEY,
        id_ingrediente FOREIGN KEY
    )

    15. Pedidos-Platos

    CREATE TABLE pedidos_platos(
        id_pedido FOREIGN KEY,
        id_plato FOREIGN KEY
    )

    16. Sucursales-Comunas X

    CREATE TABLE sucursales_comunas(
        id_sucursal FOREIGN KEY,
        id_comuna FOREIGN KEY
    )

B. Agregar los datos de los archivos
    1. clientes.csv
        - Agregar un ID a todos los clientes, agregar el mismo si se repite
        - Separar y crear una tabla direccciones clientes, con la direccion, el cut y el id del cliente asociado
        - En la tabla clientes quitar todos los elementos repetidos
        - TABLA DIRECCIONES:
            - En la tabla direcciones asignar un id a cada direccion particular
            - Poner el cut de la comuna como una llave foranea
            - Poner el id del cliente como una llave foranea
            - Poner el id de la direccion como llave primaria
    2. comuna.csv
        - Asignar el cut de la comuna como llave primaria
    3. platos.csv
        - Asignar el id del plato como la llave primaria
        - No agregar la linea de ingredientes, guardar todos los ingredientes para crear una nueva tabla
        - TABLA INGREDIENTES:
            - Poner un id_ingrediente como llave primaria
            - Poner cada ingrediente asociado
        - TABLA PLATO_INGREDIENTES
            - Poner id_ingrediente y id_plato en relacion many o many
        - TABLA PLATO-RESTAURANTES:
            - Guardar la tabla de plato restaurantes con el nombre del restoran y el id del plato
        - Quitar las variables de restaurant, vigente y repartoming porque van en otras tablas
    4. cdeldes.csv
        - Separar lo que es delivery, asignar un id_delivery y toda la info relacionada
        - Separa lo que es despachador, asignar un id_despachador y toda la info relacionada

    5. restaurantes.csv
        - Separar las direcciones del resto de elementos y crear una tabla sucursales
        - TABLA SUCURSALES:
            - asignar un id_sucursal a cada sucursal
            - colocar el id_del restaurante del cual se saco la sucursal como foreign key
            - Poner el nombre de la sucursal, direccion, fono
            - Asociar el nombre de la comuna son su cut, y poner el cut de la comuna como foreign key a la tabla de Comunas
        - Colocar el resto de variables del restoran
        - TABLA PLATO-RESTAURANTES:
            - Volver a la tabla de plato restoranes y cambiar el nombre del restoran por el id del restoran y ponerlo en la bdd
    6. pedidos.csv
        - Asignar el id_pedido como la llave primaria
        - Relacionar el correo del cliente con su id de la tabla de clientes y ponerlo en la tabla pedidos como llave foranea
        - Relacionar el nombre del delivery con su id de la tabla de delivery y ponerlo en la tabla de pedidos como llave foranea
        - Relacionar el nombre del despachador con su id de la tabla de despachadores y ponerlo en la tabla de pedidos como llave foranea
        - Relacionar el nombre de la sucursal con el id de la sucursal
        - Agregar los platos a la tabla de relacion pedidos - platos con el id del cliente y el id de los platos
        - Colocar el resto de la info
    7. suscripciones.csv
        - asignar un id_suscripcion a cada linea
        - asociar el email del cliente a su id_cliente y guardarlo
        - asociar el nombre del delivery a su id_delivery y guardarlo
        - agregar el resto de elementos
    8. calificacion.csv
        - Agregar un id_calificacion a cada linea
        - Asignar el id_pedido como foreign key
        - Colocar el resto de variables



Platos -> Cada id es unico. Aun que hay repetidos como es el caso de id 6 y 7, ambos son referenciados en los pedidos
mas de dos veces, por lo que los dejaremos como si cada id fuera unico (pero solo el id)

Comunas -> Leer con mac_roman